# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'w': 'session-save', 'q': 'quit', 'wq': 'quit --save'}

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'eb': 'https://ebay.de/sch/{}', 'am': 'https://www.amazon.de/s/ref=nb_sb_noss?__mk_de_DE=%C5M%C5%u017D%D5%D1&url=search-alias%3Daps&field-keywords={}' ,'yt': 'https://www.youtube.com/results?search_query={}','4':'http://boards.4chan.org/{}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://start.duckduckgo.com'
# Xresources
import subprocess

def read_xresources(prefix):
    props = {}
    x = subprocess.run(['xrdb', '-query'], stdout=subprocess.PIPE)
    lines = x.stdout.decode().split('\n')
    for line in filter(lambda l : l.startswith(prefix), lines):
        prop, _, value = line.partition(':\t')
        props[prop] = value
    return props

xresources = read_xresources('*')
c.colors.statusbar.normal.bg = xresources['*color0']
c.colors.completion.category.border.bottom = xresources['*color0']

c.colors.completion.category.bg = xresources['*color0'] 
c.colors.completion.category.border.bottom = xresources['*color1'] 
c.colors.completion.category.border.top= xresources['*color1'] 
c.colors.completion.category.fg= xresources['*color1'] 
c.colors.completion.even.bg = xresources['*color0'] 
c.colors.completion.fg = xresources['*color1'] 
c.colors.completion.item.selected.bg= xresources['*color0'] 
c.colors.completion.item.selected.border.bottom = xresources['*color0'] 
c.colors.completion.item.selected.border.top = xresources['*color0'] 
c.colors.completion.item.selected.fg = xresources['*color2'] 
c.colors.completion.match.fg = xresources['*color2'] 
c.colors.completion.odd.bg = xresources['*color0'] 
c.colors.completion.scrollbar.bg = xresources['*color0'] 
c.colors.completion.scrollbar.fg = xresources['*color4'] 
c.colors.downloads.bar.bg = xresources['*color1']
c.colors.downloads.error.bg = xresources['*color3']
c.colors.downloads.error.fg = xresources['*color2']
c.colors.downloads.start.bg = xresources['*color1'] 
c.colors.downloads.start.fg = xresources['*color2'] 
c.colors.downloads.stop.bg= xresources['*color1'] 
c.colors.downloads.stop.fg= xresources['*color0'] 
c.colors.hints.bg = xresources['*color3'] 
c.colors.hints.fg = xresources['*color0'] 
c.colors.hints.match.fg = xresources['*color2'] 
c.colors.keyhint.bg = xresources['*color1'] 
c.colors.keyhint.fg= xresources['*color3'] 
c.colors.keyhint.suffix.fg= xresources['*color0'] 
c.colors.messages.error.bg= xresources['*color0'] 
c.colors.messages.error.border= xresources['*color0'] 
c.colors.messages.error.fg= xresources['*color1'] 
c.colors.messages.info.bg= xresources['*color0'] 
c.colors.messages.info.border= xresources['*color0'] 
c.colors.messages.info.fg= xresources['*color2'] 
c.colors.messages.warning.bg= xresources['*color0'] 
c.colors.messages.warning.border= xresources['*color0'] 
c.colors.messages.warning.fg= xresources['*color0'] 
c.colors.prompts.bg= xresources['*color0'] 
c.colors.prompts.border= xresources['*color0'] 
c.colors.prompts.fg= xresources['*color1'] 
c.colors.prompts.selected.bg= xresources['*color0'] 
c.colors.statusbar.caret.bg= xresources['*color0'] 
c.colors.statusbar.caret.fg= xresources['*color1'] 
c.colors.statusbar.caret.selection.bg= xresources['*color0'] 
c.colors.statusbar.caret.selection.fg= xresources['*color2'] 
c.colors.statusbar.command.bg= xresources['*color0'] 
c.colors.statusbar.command.fg= xresources['*color1'] 
c.colors.statusbar.command.private.bg= xresources['*color0'] 
c.colors.statusbar.command.private.fg= xresources['*color1'] 
c.colors.statusbar.insert.bg= xresources['*color9'] 
c.colors.statusbar.insert.fg= xresources['*color0'] 
c.colors.statusbar.normal.bg= xresources['*color0'] 
c.colors.statusbar.normal.fg= xresources['*color9'] 
c.colors.statusbar.passthrough.bg= xresources['*color0'] 
c.colors.statusbar.passthrough.fg= xresources['*color0'] 
c.colors.statusbar.private.bg= xresources['*color0'] 
c.colors.statusbar.private.fg= xresources['*color0'] 
c.colors.statusbar.progress.bg= xresources['*color10'] 
c.colors.statusbar.url.error.fg= xresources['*color0'] 
c.colors.statusbar.url.fg= xresources['*color1'] 
c.colors.statusbar.url.hover.fg= xresources['*color0'] 
c.colors.statusbar.url.success.http.fg= xresources['*color0'] 
c.colors.statusbar.url.success.https.fg= xresources['*color0'] 
c.colors.statusbar.url.warn.fg= xresources['*color0'] 
c.colors.tabs.bar.bg= xresources['*color0'] 
c.colors.tabs.even.bg= xresources['*color0'] 
c.colors.tabs.even.fg= xresources['*color7'] 
c.colors.tabs.indicator.error= xresources['*color0'] 
c.colors.tabs.indicator.start= xresources['*color0'] 
c.colors.tabs.indicator.stop= xresources['*color0'] 
c.colors.tabs.odd.bg= xresources['*color0'] 
c.colors.tabs.odd.fg= xresources['*color7'] 
c.colors.tabs.selected.even.bg= xresources['*color12'] 
c.colors.tabs.selected.even.fg= xresources['*color7'] 
c.colors.tabs.selected.odd.bg= xresources['*color12'] 
c.colors.tabs.selected.odd.fg= xresources['*color7'] 
c.fonts.monospace = "Inconsolata"
c.fonts.web.family.standard = "Inconsolata"
